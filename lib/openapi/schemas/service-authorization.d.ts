/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/forgot-password": {
    /**
     * Forgot Password Handler
     * @description Handler to initiate the password reset process for a user.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ForgotPasswordRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ForgotPasswordResponse"];
          };
        };
        /** @description Validation Error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/": {
    /**
     * Check if User Exists
     * @description This endpoint checks if a user exists based on the provided access token.
     */
    get: {
      parameters: {
        cookie: {
          /**
           * @description Access token cookie
           * @example accessToken=your_access_token_here
           */
          accessToken: string;
        };
      };
      responses: {
        /** @description Me */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Access token not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description User not exists */
        409: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/login": {
    /**
     * User Login Handler
     * @description Handler to authenticate and log in a user.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        /** @description Validation Error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Wrong password or email */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/logout": {
    /**
     * Cleanup Tokens Handler
     * @description Handler to cleanup tokens associated with an access token.
     */
    get: {
      parameters: {
        cookie: {
          /**
           * @description Access token cookie
           * @example accessToken=your_access_token_here
           */
          accessToken: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Access token not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/refresh": {
    /**
     * Refresh Token Handler
     * @description Handler to refresh user token.
     */
    get: {
      parameters: {
        cookie: {
          /**
           * @description Refresh token cookie
           * @example refreshToken=your_refresh_token_here
           */
          refreshToken: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Refresh token not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/registration": {
    /**
     * User Registration Handler
     * @description Handler to register a new user.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RegisterUserRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Validation Error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User already exists */
        409: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/change-name": {
    /** Change user name */
    put: {
      parameters: {
        cookie: {
          /**
           * @description Access token cookie
           * @example accessToken=your_access_token_here
           */
          accessToken: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description New name for the user */
            name: string;
          };
        };
      };
      responses: {
        /** @description User name changed successfully */
        200: {
          content: never;
        };
        /** @description Access token not found */
        404: {
          content: {
            "application/json": {
              /** @description Error message */
              message: string;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /** @description The ID of the user. */
      _id: string;
      /** @description The name of the user. */
      name: string;
      /**
       * Format: email
       * @description The email address of the user.
       */
      email: string;
      /** @description The password of the user. */
      password: string;
      /**
       * Format: int64
       * @description The timestamp indicating when the user was created or last updated.
       */
      timestamp: number;
      /** @description Information related to password reset. */
      forgotPassword?: {
        /** @description The token generated for password reset. */
        token?: string;
        /**
         * Format: int64
         * @description The timestamp indicating when the password reset token was generated.
         */
        timestamp?: number;
      };
    };
    RegisterUserRequest: {
      name: string;
      /** Format: email */
      email: string;
      password: string;
      confirmation: string;
    };
    LoginRequest: {
      /** Format: email */
      email: string;
      password: string;
    };
    LoginResponse: {
      /**
       * Format: email
       * @description The email address of the logged-in user.
       */
      email: string;
      /** @description The hashed password of the logged-in user. */
      password: string;
    };
    ForgotPasswordRequest: {
      /** Format: email */
      email: string;
    };
    ForgotPasswordResponse: {
      /** @description Indicates if the password reset process was initiated successfully. */
      ok: boolean;
    };
    Error: {
      /** @description A message describing the error. */
      message: string;
      /** @description The HTTP status code of the error. */
      status: number;
    };
    ValidationError: {
      /** @example /forgot-password */
      url?: string;
      /** @example 400 */
      statusCode: number;
      /** @example Validation Error */
      statusMessage?: string;
      /** @example Validation Error */
      message: string;
      data: {
          /** @example invalid_string */
          code: string;
          /** @example Invalid email */
          message: string;
          path: string[];
          /** @example email */
          validation?: string;
        }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
